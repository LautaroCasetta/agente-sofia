import streamlit as st
from openai import OpenAI

# [MODIFICACI√ìN] Lectura del archivo con las instrucciones del sistema.
try:
    with open("system_instructions.txt", "r") as file:
        system_instructions = file.read().strip()  # Leer y limpiar el contenido del archivo.
except FileNotFoundError:
    st.error("El archivo 'system_instructions.txt' no se encontr√≥. Por favor, aseg√∫rate de que est√© en el directorio.")
    system_instructions = None

# Mostrar t√≠tulo y descripci√≥n.
st.title("üí¨ Sof√≠a, Asistente Virtual de la Agencia I-COMEX")
st.write(
    "Sof√≠a, el agente de IA de la Agencia I-COMEX, est√° dise√±ada para responder tus preguntas sobre comercio exterior e inversiones en La Pampa. "
    "Obten√© m√°s informaci√≥n sobre la Agencia I-COMEX en su [sitio web oficial](https://icomexlapampa.org/es/)."
)

# Pedir al usuario su clave de API.
openai_api_key = st.text_input("C√≥digo Secreto Agencia I-COMEX", type="password")
if not openai_api_key:
    st.info("Peg√° ac√° el c√≥digo que Lauti te pas√≥ para poder continuar.", icon="üóùÔ∏è")
else:
    # Crear un cliente de OpenAI.
    client = OpenAI(api_key=openai_api_key)

    # [MODIFICACI√ìN] Inicializar los mensajes en `st.session_state`, incluyendo el mensaje del sistema.
    if "messages" not in st.session_state:
        st.session_state.messages = []
        if system_instructions:
            st.session_state.messages.append({"role": "system", "content": system_instructions})

    # [MODIFICACI√ìN] Mostrar solo los mensajes que no son del sistema.
    for message in st.session_state.messages:
        if message["role"] != "system":  # Ignorar mensajes del sistema.
            with st.chat_message(message["role"]):
                st.markdown(message["content"])

    # Crear un campo de entrada para que el usuario env√≠e mensajes.
    if prompt := st.chat_input("Contame en qu√© te puedo ayudar..."):
        # Guardar y mostrar el mensaje del usuario.
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        # Generar una respuesta usando la API de OpenAI.
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=st.session_state.messages,  # [MODIFICACI√ìN] Se env√≠an todos los mensajes, incluyendo el del sistema.
            stream=True,
            temperature=0.2
        )

        # Mostrar la respuesta y guardarla en el estado de la sesi√≥n.
        with st.chat_message("assistant"):
            response_content = st.write_stream(response)
        st.session_state.messages.append({"role": "assistant", "content": response_content})
